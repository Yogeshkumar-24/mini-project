

#include <SoftwareSerial.h>
#include <TinyGPS.h>
#include <AFMotor.h> 

SoftwareSerial mySerial(A1, A2);
TinyGPS gps;
AF_DCMotor motor(4);
const int buzzerPin = A0;

long locations[][2] = {{11017987, 76937093}, {11017987, 76937093}, {11017987, 76937093}, {11017987, 76937093}, {11017987, 76937093}, {11017992, 76937095}, {11017992, 76937095}, {11017995, 76937095}, {11017995, 76937095}, {11017998, 76937095}, {11017998, 76937095}, {11018003, 76937095}, {11018003, 76937095}, {11018010, 76937095}, {11018010, 76937095}, {11018015, 76937095}, {11018015, 76937095}, {11018018, 76937093}, {11018018, 76937093}, {11018023, 76937093}, {11018023, 76937093}, {11018028, 76937092}, {11018028, 76937092}, {11018033, 76937092}, {11018033, 76937092}, {11018037, 76937090}, {11018037, 76937090}, {11018043, 76937090}, {11018043, 76937090}, {11018048, 76937090}, {11018048, 76937090}, {11018053, 76937088}, {11018053, 76937088}, {11018058, 76937087}, {11018058, 76937087}, {11018065, 76937087}, {11018065, 76937087}, {11018072, 76937087}, {11018072, 76937087}, {11018077, 76937087}, {11018077, 76937087}, {11018083, 76937087}, {11018083, 76937087}, {11018090, 76937087}, {11018090, 76937087}, {11018098, 76937087}, {11018098, 76937087}, {11018105, 76937087}, {11018105, 76937087}, {11018112, 76937085}, {11018112, 76937085}, {11018118, 76937085}, {11018118, 76937085}, {11018123, 76937083}, {11018123, 76937083}, {11018132, 76937082}, {11018132, 76937082}, {11018140, 76937082}, {11018140, 76937082}, {11018148, 76937082}, {11018148, 76937082}, {11018155, 76937082}, {11018155, 76937082}, {11018162, 76937080}, {11018162, 76937080}, {11018168, 76937078}, {11018168, 76937078}, {11018177, 76937078}, {11018177, 76937078}, {11018183, 76937078}, {11018183, 76937078}, {11018190, 76937077}, {11018190, 76937077}, {11018198, 76937077}, {11018198, 76937077}, {11018205, 76937075}, {11018205, 76937075}, {11018212, 76937075}, {11018212, 76937075}, {11018218, 76937077}, {11018225, 76937077}, {11018225, 76937077}, {11018232, 76937077}, {11018238, 76937073}, {11018238, 76937073}, {11018245, 76937073}, {11018250, 76937073}, {11018250, 76937073}, {11018257, 76937072}, {11018265, 76937070}, {11018265, 76937070}, {11018272, 76937070}, {11018280, 76937070}, {11018280, 76937070}, {11018287, 76937070}, {11018293, 76937072}, {11018293, 76937072}, {11018300, 76937070}, {11018307, 76937072}, {11018307, 76937072}, {11018315, 76937073}, {11018322, 76937072}, {11018322, 76937072}, {11018330, 76937072}, {11018337, 76937070}, {11018337, 76937070}, {11018343, 76937070}, {11018352, 76937068}, {11018352, 76937068}, {11018358, 76937067}, {11018367, 76937065}, {11018367, 76937065}, {11018375, 76937065}, {11018382, 76937063}, {11018382, 76937063}, {11018388, 76937062}, {11018397, 76937062}, {11018397, 76937062}, {11018405, 76937062}, {11018405, 76937062}, {11018413, 76937060}, {11018413, 76937060}, {11018420, 76937060}, {11018420, 76937060}, {11018428, 76937060}, {11018428, 76937060}, {11018435, 76937058}, {11018435, 76937058}, {11018443, 76937058}, {11018443, 76937058}, {11018452, 76937057}, {11018452, 76937057}, {11018460, 76937057}, {11018460, 76937057}, {11018468, 76937055}, {11018468, 76937055}, {11018475, 76937052}, {11018475, 76937052}, {11018483, 76937052}, {11018483, 76937052}, {11018490, 76937052}, {11018490, 76937052}, {11018498, 76937050}, {11018498, 76937050}, {11018505, 76937048}, {11018505, 76937048}, {11018513, 76937047}, {11018513, 76937047}, {11018520, 76937047}, {11018520, 76937047}, {11018528, 76937047}, {11018528, 76937047}, {11018535, 76937047}, {11018535, 76937047}, {11018542, 76937047}, {11018542, 76937047}, {11018548, 76937045}, {11018548, 76937045}, {11018555, 76937045}, {11018555, 76937045}, {11018562, 76937042}, {11018562, 76937042}, {11018570, 76937038}, {11018570, 76937038}, {11018575, 76937033}, {11018575, 76937033}, {11018580, 76937032}};


int rowCount = sizeof(locations) / sizeof(locations[0]);
double prevLat = 0.0, prevLon = 0.0;

void setup() {
  pinMode(buzzerPin, OUTPUT);
  Serial.begin(4800);
  while (!Serial);
  Serial.println("Started");
  mySerial.begin(9600);
}

void loop() {
  if (mySerial.available()) {
    char c = mySerial.read();
    if (gps.encode(c)) {
      long lat, lon;
      gps.get_position(&lat, &lon);

      double currentLat = static_cast<double>(lat) / 1000000.0;
      double currentLon = static_cast<double>(lon) / 1000000.0;

      // Check if GPS data has changed significantly
      if (abs(currentLat - prevLat) > 0.00001 || abs(currentLon - prevLon) > 0.00001) {
        prevLat = currentLat;
        prevLon = currentLon;

        bool inDanger = false;

        for (int i = 0; i < rowCount; i++) {
          double distance = calculateDistance(currentLat, currentLon, locations[i][0] / 1000000.0, locations[i][1] / 1000000.0);

          if (distance < 15) {
            inDanger = true;
            break;
          }
        }

        if (inDanger) {
          Serial.println("You are in danger");
          analogWrite(buzzerPin, 255);
          motor.setSpeed(30);
          motor.run(FORWARD);
        } else {
          analogWrite(buzzerPin, 0);
          motor.setSpeed(100);
          motor.run(FORWARD);
        }

      }
    }
  }
}

double calculateDistance(double lat1, double lon1, double lat2, double lon2) {
  const double EarthRadius = 6371000.0;
  double lat1_rad = radians(lat1);
  double lon1_rad = radians(lon1);
  double lat2_rad = radians(lat2);
  double lon2_rad = radians(lon2);

  double dLat = lat2_rad - lat1_rad;
  double dLon = lon2_rad - lon1_rad;

  double a = sin(dLat / 2.0) * sin(dLat / 2.0) +
             cos(lat1_rad) * cos(lat2_rad) *
             sin(dLon / 2.0) * sin(dLon / 2.0);
  double c = 2.0 * atan2(sqrt(a), sqrt(1 - a));

  return EarthRadius * c;
}
